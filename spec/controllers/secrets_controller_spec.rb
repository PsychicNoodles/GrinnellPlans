# require 'rails_helper'
#
# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to specify the controller code that
# # was generated by the Rails when you ran the scaffold generator.
#
# describe SecretsController do
#
#   def mock_secret(stubs={})
#     @mock_secret ||= mock_model(Secret, stubs).as_null_object
#     @account = Account.create! :username => "testaccount", :password => "123456", :password_confirmation => "123456"
#     @current_account_session ||=  AccountSession.create! @account
#   end
#
#   describe "GET index" do
#     it "assigns all secrets as @secrets" do
#       Secret.stub(:all) { [mock_secret] }
#       get :index
#       assigns(:secrets).should eq([mock_secret])
#     end
#   end
#
#   describe "GET show" do
#     it "assigns the requested secret as @secret" do
#       Secret.stub(:find).with("37") { mock_secret }
#       get :show, :id => "37"
#       assigns(:secret).should be(mock_secret)
#     end
#   end
#
#   describe "GET new" do
#     it "assigns a new secret as @secret" do
#       Secret.stub(:new) { mock_secret }
#       get :new
#       assigns(:secret).should be(mock_secret)
#     end
#   end
#
#   # describe "GET edit" do
#   #   it "assigns the requested secret as @secret" do
#   #     Secret.stub(:find).with("37") { mock_secret }
#   #     get :edit, :id => "37"
#   #     assigns(:secret).should be(mock_secret)
#   #   end
#   # end
#
#   describe "POST create" do
#     describe "with valid params" do
#       it "assigns a newly created secret as @secret" do
#         Secret.stub(:new).with({'these' => 'params'}) { mock_secret(:save => true) }
#         post :create, :secret => {'these' => 'params'}
#         assigns(:secret).should be(mock_secret)
#       end
#
#       it "redirects to the created secret" do
#         Secret.stub(:new) { mock_secret(:save => true) }
#         post :create, :secret => {}
#         response.should redirect_to(secret_url(mock_secret))
#       end
#     end
#
#     describe "with invalid params" do
#       it "assigns a newly created but unsaved secret as @secret" do
#         Secret.stub(:new).with({'these' => 'params'}) { mock_secret(:save => false) }
#         post :create, :secret => {'these' => 'params'}
#         assigns(:secret).should be(mock_secret)
#       end
#
#       it "re-renders the 'new' template" do
#         Secret.stub(:new) { mock_secret(:save => false) }
#         post :create, :secret => {}
#         response.should render_template("new")
#       end
#     end
#   end
#
#   describe "PUT update" do
#     describe "with valid params" do
#       it "updates the requested secret" do
#         Secret.stub(:find).with("37") { mock_secret }
#         mock_secret.should_receive(:update_attributes).with({'these' => 'params'})
#         put :update, :id => "37", :secret => {'these' => 'params'}
#       end
#
#       it "assigns the requested secret as @secret" do
#         Secret.stub(:find) { mock_secret(:update_attributes => true) }
#         put :update, :id => "1"
#         assigns(:secret).should be(mock_secret)
#       end
#
#       it "redirects to the secret" do
#         Secret.stub(:find) { mock_secret(:update_attributes => true) }
#         put :update, :id => "1"
#         response.should redirect_to(secret_url(mock_secret))
#       end
#     end
#
#     describe "with invalid params" do
#       it "assigns the secret as @secret" do
#         Secret.stub(:find) { mock_secret(:update_attributes => false) }
#         put :update, :id => "1"
#         assigns(:secret).should be(mock_secret)
#       end
#
#       it "re-renders the 'edit' template" do
#         Secret.stub(:find) { mock_secret(:update_attributes => false) }
#         put :update, :id => "1"
#         response.should render_template("edit")
#       end
#     end
#   end
#
#   describe "DELETE destroy" do
#     it "destroys the requested secret" do
#       Secret.stub(:find).with("37") { mock_secret }
#       mock_secret.should_receive(:destroy)
#       delete :destroy, :id => "37"
#     end
#
#     it "redirects to the secrets list" do
#       Secret.stub(:find) { mock_secret }
#       delete :destroy, :id => "1"
#       response.should redirect_to(secrets_url)
#     end
#   end
#
# end
